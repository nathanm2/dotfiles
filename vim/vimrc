" Debugging Tips ========================================================
"
" List your scripts:
"    :scriptnames
"
" Run VIM without any scripts:
"     $ gvim -u NONE -U NONE
"
" Source plugins individually:
"     :so path/to/script
"
":set verbose=15
":set verbosefile=/tmp/vimrc3.txt

" Setup Vundle =======================================================
"   Vundle is a package manager for vim
"
"  Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ

:set nocompatible    " Requires VIM (not VI)
:filetype off    " Re-enabled later.

" Set the runtime path to include Vundle and initialize:
:set rtp+=~/.vim/bundle/Vundle.vim
:call vundle#begin()

" Let Vundle manage Vundle, required and must be first:
:Plugin 'gmarik/Vundle.vim'

" Ctrl-P permits fuzzy searching of file names:
:Plugin 'ctrlpvim/ctrlp.vim'

" Enable extra JSON support.
:Plugin 'elzr/vim-json'

" Enable vimwiki for note taking
:Plugin 'vimwiki/vimwiki'

" Enable plugin for RUST language.
:Plugin 'rust-lang/rust.vim'

" Enable GO language support.
" :Plugin 'fatih/vim-go'

" Enables the 'Ack: <string> <dir>' search.
:Plugin 'ack.vim'

" Enable 'unimpaired' which are a set of convenience mappings.
:Plugin 'unimpaired.vim'

" Enable 'abolish' which provides a convenient way to switch between camelCase,
" MixedCase, and snake_case.
:Plugin 'abolish.vim'

:Plugin 'meson.vim'

" No comments can on the Plugin line.

" All the Vundle plugins must be added before the following line:
:call vundle#end()

" Enable Vim file type detection.
"    This will permit 'FileType' autocmd events to trigger.
"    The 'plugin' option causes the 'ftplugin.vim' to be loaded.
"    The 'indent' option causes the 'indent.vim' file to be loaded.
:filetype plugin indent on

" Ctrl-P Configuration ==================================================

" Get project files by using git:
:let g:ctrlp_user_command=['.git', 'cd %s && git ls-files']

" Enable ctrl-p to use ctags:
:let g:ctrlp_extensions = ['tag']

" Global Configs ========================================================
"    Settings for all files.

" Enable highlight search to highlight all the matches:
:set hlsearch

" Perform incremental searching as the search pattern is entered:
:set incsearch

" Remember the last 200 Ex commands instead of the default 20
:set history=200

" Enable 24-bit color support in the terminal:
:set termguicolors

" Enable the 'peachpuff' color scheme (one of the default color schemes):
:colorscheme peachpuff

" Make tab completion follow bash shell conventions:
:set wildmode=longest,list

" Enable syntax highlighting.
"    Note: On debian systems this is automatically set for you in
"    /usr/share/vim/vimrc.
"
"    Note: Setting syntax on will also automatically set filetype on.
:syntax on

" Copy, Cut, and Paste to the CLIPBOARD buffer (+)
:noremap <F1> "+y
:noremap <F2> "+d
:noremap <F3> "+p

" A character to be pressed before some of the following mappings take effect:
:let mapleader = "-"

" Make the current word upper/lower case:
:nnoremap <leader>U m`wbgUw``
:nnoremap <leader>u m`wbguw``
:inoremap UU <esc>m`wbgUw``a

" Make it easier to edit this file by defining two mappings:
"   - One to edit the vimrc file.
"   - One to source the vimrc file.
:nnoremap <leader>ev :split $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

" Make jk a valid escape sequence:
:inoremap jk <esc>

" Make it easier to navigate between splits:
:nnoremap <c-j> <c-w><c-j>
:nnoremap <c-k> <c-w><c-k>
:nnoremap <c-l> <c-w><c-l>
:nnoremap <c-h> <c-w><c-h>

" Clear the last search:
:nnoremap <leader>c :nohlsearch<cr>

" Turn on syntax folding:
:nnoremap <leader>z :set foldmethod=syntax foldlevel=2<cr>

" Cause ctrlp (and everything else) to open a vertically split file to the
" right of the current window:
:set splitright

" By default VIM complains when you try to navigate away from a buffer that
" has unsaved changes.  We set the following option to avoid this complaint.
" :set hidden

autocmd GUIEnter * set vb t_vb=

" Display a visual ruler on the 80 column.  Change the color to 'black' on
" terminal versions of vim (ctermbg=0), and lightgrey on GUI versions:
if exists('+colorcolumn')
	set colorcolumn=80
	highlight ColorColumn ctermbg=0 guibg=lightgrey
endif

" Display EOL and tab characters running ':set list'
set listchars=eol:$,tab:>-

" Insert Completions ======================================================

" Configure the behavior of the menu popup:
"    - longest: Only insert the longest common test of the matches.
"    - menu   : Use a popup menu to show the possible completions.
:set completeopt=longest,menu

" Make it a bit easier to get to the completions:
"   Note: see :help inc-completions for a full list of all the insert
"   completions that VIM supports.  We're only providing maps for two of them.
:inoremap <c-]> <c-x><c-]>
":inoremap <c-o> <c-x><c-o>

" Make <Tab> start/continue an omni-completion:
function! CleverTab()
    if pumvisible()
        return "\<C-N>"
    elseif strpart( getline('.'), col('.')-2, 1 ) =~ '^$\|\s\|;\|\"\|>'
        return "\<Tab>"
    else
        return "\<C-X>\<C-O>"
   endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" Make <Tab> start/continue an omni-completion from Vimwiki when NOT in a table:
"   Note: Vimwiki defines its own local mapping for <Tab> that effects behavior
"   while in a table.  We'd like to retain the behavior.
function! CleverTabVimwiki()
    if vimwiki#tbl#is_table(getline("."))
        return vimwiki#tbl#kbd_tab()
    else
        return CleverTab()
endfunction

" Project Configuration ===================================================
"       To permit different settings for different coding projects.

" Common Config:
function! s:CommonConfig()

    " Maximum width of text that is being inserted.  Longer lines will be
    " broken up.
    set textwidth=80

    " Insure the current window width is the same as the textwidth option:
    let &winwidth=&textwidth

    " What character to show wrapped lines of text:
    set showbreak=>

    " Tells VIM how many columns a tab character counts for:
    set tabstop=4

    " How many columns to indent code with the reindent operations (<< and >>)
    " and automatic C-style indentation.
    set shiftwidth=4

    " How many spaces should a <Tab> counts for while editing.
    "   When expandtab is set, this permits a single 'backspace' to delete
    "   all the spaces that constitute the expanded tab.
    set softtabstop=4

    " Insert spaces when <Tab> is pressed:
    set expandtab

    highlight RedundantSpaces ctermbg=red guibg=red
    match RedundantSpaces /\s\+$\| \+\ze\t/
endfunction

" C/C++/Java Configuration:
function! s:CConfig()

    "Apply the common configuration:
    call s:CommonConfig()

    " Enable automatic C program indenting:
    "
    " Configured by cinoptions (see below).
    set cindent

    " Controls automatic C indentation:
    "    :0  - Place case labels on the same indent as the switch.
    "    (0  - When in unclosed parentheses, line up with next non-white after
    "          the unclosed parentheses.
    "    l1  - Always align with the case label instead of the statement after
    "          it on the same line.
    "    t0  - Indent a function return type declaration 0 characters from the
    "          margin.
    set cinoptions=:0,(0,l1,t0

    " How automatic formatting is done (see :help fo-table):
    "    c  : Auto-wrap comments using textwidth, inserting the current comment
    "         leader automatically.
    "    q  : Allow formatting of comments with gq.
    set formatoptions=cq

    " Let <Leader>-f run clang-format on the specified region of code:
    if has('python3')
        :noremap <leader>f :py3f ~/bin/clang-format.py<cr>
        :imap <c-f> <c-o>:py3f ~/bin/clang-format.py<cr>
    else
        :noremap <leader>f :pyf ~/bin/clang-format.py<cr>
        :imap <c-f> <c-o>:pyf ~/bin/clang-format.py<cr>
    endif

endfunction

" GNU Coding Standard:
function! s:GnuConfig()

    " Enable automatic C program indenting:
    set cindent

    " Controls automatic C indentation (see :help cinoptions-values)
    "   >4   - Normal indentation.
    "   n-2  - Added to the prevailing indent for a statement after an "if",
    "          "while", etc., if it is NOT inside a set of braces.  The -2
    "          causes single lines to appear in the same column as a brace.
    "   {2   - Add 2 to an indent of a brace if the brace is inside another
    "          brace.
    "   :2   - Indent case statements 2 characters from the indent of the
    "          switch.
    "   =2   - Statements after the case label.
    "   g0   - C++ scope declarations (public:, private:, etc.)
    "   h2   - C++ statements after a scope declaration.
    "   p5   - K&R-style function declaration indentation.
    "   t0   - Function return type declaration.
    "   +2   - Indentation of a continuation line.
    "
    " Parentheses Settings
    "   (0   - When in unclosed parentheses.  Line up with the next non-white
    "          character after the unclosed parentheses.
    "   u0   - Same as (0, but for one level deeper.
    "   w1   - Always line up with the character immediately after the
    "          unclosed parentheses.
    "   m1   - If the line starts with a closing parentheses line it up with the
    "          first character of the line with the matching opening
    "          parentheses.
    set cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1

    " How many columns to indent code with the reindent operations (<< and >>)
    " and automatic C-style indentation.
    set shiftwidth=2

    " How many spaces should a <Tab> count for while editing.
    "   When expandtab is set, this permits a single 'backspace' to delete
    "   all the spaces that constitute the expanded tab.
    set softtabstop=2

    set textwidth=79

    " How automatic formatting is done (see :help fo-table):
    "    c  : Auto-wrap comments using textwidth, inserting the current comment
    "         leader automatically.
    "    q  : Allow formatting of comments with gq.
    "    l  : Long lines are not broken in insert mode.
    set fo+=cql

    " Tells VIM how many columns a tab character counts for:
    set tabstop=8
endfunction

" JSON Config:
function! s:JsonConfig()

    " Copy the indentation of the current line when starting a new one.
    set autoindent

    " Automatic formatting options (see :help fo-table):
    "
    set formatoptions=t
    set shiftwidth=2
    set softtabstop=2 tabstop=8
    set expandtab
    set foldmethod=syntax
endfunction

" Markdown Config:
function! s:MarkdownConfig()

    " Call the defaults:
    call s:CommonConfig()
    set textwidth=78
    " set foldcolumn=1
    set foldlevel=2
endfunction


" Vimwiki Config:
function! s:VimwikiConfig()

    " Call the defaults:
    call s:CommonConfig()
    set tabstop=2 shiftwidth=2 softtabstop=2

    " Auto-wrap text using textwidth:
    set formatoptions+=t

    inoremap <expr> <buffer> <Tab> CleverTabVimwiki()
endfunction

" Restructured Text Config:
function! s:RstConfig()

    " Maximum width of text that is being inserted.  Longer lines will be
    " broken up.
    set textwidth=78

    " What character to show wrapped lines of text:
    set showbreak=>

    " Tells VIM how many columns a tab character counts for:
    set tabstop=2
    set softtabstop=2

    " How many columns to indent code with the reindent operations (<< and >>)
    " and automatic C-style indentation.
    set shiftwidth=2

    " The fold column shows where a fold exists.
    set foldcolumn=1

endfunction

function! s:RustConfig()

    " Enable automatic running of :RustFmt when saving a buffer.
    let g:rustfmt_autosave = 1

    " Maximum width of text that is being inserted.  Longer lines will be
    " broken up.
    set textwidth=100

	set colorcolumn=100
endfunction

function! s:PythonConfig()

    call s:CConfig()

    " Maximum width of text that is being inserted.  Longer lines will be
    " broken up.
    set textwidth=100

	set colorcolumn=100
endfunction

function! s:AptConfig()
    call s:CConfig()
    set shiftwidth=3 noexpandtab tabstop=8
endfunction


" Projects:

" Default Configuration:
function! s:DefaultProject(path)
    if &filetype =~ 'c\|cpp\|java\|groovy'
        call s:CConfig()
    elseif &filetype =~ 'python'
        call s:PythonConfig()
    else
        call s:CommonConfig()
    endif
    return 1
endfunction

" HDM Project:
function! s:HdmProject(path)
    if a:path =~ 'src/\(HDM\|hdm\)'
        " Call the defaults:
        call s:DefaultProject(a:path)

        return 1
    endif
endfunction

" GNU Coding Style Projects
function! s:GnuProject(path)
    if a:path =~ 'src/glib\($\|/\)'
        " Call the defaults:
        call s:GnuConfig()

        return 1
    endif
endfunction

" APT Coding Style Projects
function! s:AptProject(path)
    if a:path =~ 'src/apt\($\|/\)'
        " Call the defaults:
        call s:AptConfig()

        return 1
    endif
endfunction

:let g:Projects = [ function("s:HdmProject"),
                \ function("s:GnuProject"),
                \ function("s:AptProject"),
                \ function("s:DefaultProject") ]

function! s:ProjectConfigure()
    let path = expand('%:p')
    for Fn in g:Projects
        if Fn(path)
            break
        endif
    endfor
endfunction

" Invoke ProjectConfigure() for all C/C++ files (and header files):
" By wrapping it in a group we can insure it gets exactly once for a
" given file type.  Otherwise, autocmd tend to stack up upon multiple
" sourcing of the vimrc.
:augroup filetype_c
:   autocmd!
:   autocmd FileType c,cpp,cmake,bash,sh,python,groovy,cfg call s:ProjectConfigure()
:augroup END

" Invoke JsonConfig for all JSON files:
:augroup filetype_json
:   autocmd!
:   autocmd FileType json call s:JsonConfig()
:augroup END

" Invoke MarkdownConfig for all Markdown files:
:augroup filetype_markdown
:   autocmd!
:   autocmd FileType markdown,asciidoc call s:MarkdownConfig()
:augroup END

" Invoke MarkdownConfig for all vimwiki files:
:augroup filetype_vimwiki
:   autocmd!
:   autocmd FileType vimwiki call s:VimwikiConfig()
:augroup END

" Invoke RstConfig for all Restructured Text files:
:augroup filetype_rst
:   autocmd!
:   autocmd FileType rst call s:RstConfig()
:augroup END

" Invoke DefaultConfig for all Vim configuration files:
:augroup filetype_vim
:   autocmd!
:   autocmd FileType vim call s:CommonConfig()
:augroup END

" Invoke DefaultConfig for all Rust files:
:augroup filetype_rust
:   autocmd!
:   autocmd FileType rust call s:RustConfig()
:augroup END

" Git + Ctags =============================================================

" GitHandle()
"
"  This defines a 'vimscript' function that tests if we're inside a git
"  repository and then adds '.../.git/tags' to the end of the 'tags' option.
"
"  Recall that tags are used for things like tag jumping and omni completion.
function! GitHandle()
    if system("git rev-parse --is-inside-work-tree") ==? "true\n"
        let s:res = system("git rev-parse --git-dir")
        let s:res = substitute(s:res, '\n$', '', '')
        let &tags = &tags . "," . s:res . "/tags"
    endif
endfunction

" Call the GitHandle function.
:call GitHandle()

:set path=$PWD/**

" Vimwiki Configuration =====================================================

" Open the vimwiki index in split window
:noremap <Leader>wv :vsplit +VimwikiIndex<cr>
:noremap <Leader>wh :split +VimwikiIndex<cr>

let wiki_shared = {}
let wiki_shared.path = '~/Dropbox/vimwiki/'

let wiki_local = {}
let wiki_local.path = '~/vimwiki/'

let g:vimwiki_list = [wiki_local, wiki_shared]

" Clang Format =============================================================
"
" 'clang-format' is a tool for formatting C/C++/Java code.
"
" The following autocmd causes VIM to run clang-format when we save a C/C++
" file.
"
" If a .clang-format file is not found in the current or parent directories, we
" specify a fallback style of 'none' to prevent any formatting from occuring.

let g:clang_format_fallback_style = 'none'
function! FormatFile()
    let l:lines="all"
    if has('python3')
        py3f ~/bin/clang-format.py
    elseif has('python')
        pyf ~/bin/clang-format.py
    endif
endfunction

if filereadable(expand("~/bin/clang-format.py"))
   autocmd bufWritePre *.h,*.c,*.cpp,*.cc,*.H,*.C call FormatFile()
endif
